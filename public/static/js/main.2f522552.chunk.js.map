{"version":3,"sources":["Helpers/dateHelpers.js","Helpers/PortfolioHelpers.js","actions.js","dateMillisecondValues.js","components/DateWidget.js","containers/DateWidgetContainer.js","components/Header.js","retrievedStocks.js","components/elements/InputGroup.js","components/FilterField.js","components/Stocks.js","containers/StocksContainer.js","Helpers/ApiCleanup.js","components/elements/Dropdown.js","components/TradeDropdown.js","components/Trade.js","containers/TradeContainer.js","components/Transactions.js","containers/TransactionsContainer.js","components/ControlPanel.js","components/Portfolio.js","containers/PortfolioContainer.js","components/MainDropdown.js","history.js","containers/MainDropdownContainer.js","components/App.js","reducers.js","index.js"],"names":["makeDateString","date","day","month","year","makeUTCDate","getFullYear","getDate","toString","length","concat","getMonth","dateString","console","log","milliseconds","Date","dateYear","getUTCFullYear","dateMonth","getUTCMonth","dateDay","getUTCDate","getFilteredTransactions","transactions","filter","transaction","parse","transactionDate","getNumberOfShares","symbol","stockTransactions","Symbol","map","parseInt","Quantity","reduce","accumulator","currentValue","GET_DATA_REQUEST","GET_DATA_SUCCESS","GET_DATA_FAILURE","ON_DATE_WIDGET_CHANGE","ON_TRADE_CLICK","UPDATE_COST","UPDATE_QUANTITY","ON_VALID_INPUT","ON_INVALID_INPUT","RESET_FORM_VALUES","UPDATE_CASH_AVAILABLE","UPDATE_TRANSACTIONS","SET_HAS_FORM_DATA","INVALID_TRADE","VALID_TRADE","CHANGE_TRANSACTIONS_DATES_SORT_DIRECTION","CHANGE_TRANSACTIONS_SYMBOLS_SORT_DIRECTION","SORT_TRANSACTIONS_DATES","SET_FILTER_INPUT","SET_TRANSACTIONS_FILTER_INPUT","onTradeClick","selectedStock","type","onValidInput","tradeInfo","resetFormValues","setHasFormData","invalidTrade","validTrade","sortTransactionsDates","getHistoricalStockData","dispatch","fetch","then","response","ok","Error","status","statusText","json","stockData","catch","error","getDataFailure","handleTransactionsDatesSort","getState","sortedTransactions","state","sortDirection","transactionsDatesSortDirection","sort","a","b","Promise","resolve","changeTransactionsDatesSortDirection","handleTransactionsSymbolsSort","transactionsSymbolsSortDirection","changeTransactionsSymbolsSortDirection","DEC_1_2016","DEC_31_2017","dayLength","DateWidget","_ref","onChange","react_default","createElement","id","className","name","min","max","step","toDateString","DateWidgetContainer","this","props","_this$props","utcDate","components_DateWidget","Component","connect","e","target","value","onDateWidgetChange","Header","retrievedStocks","InputGroup","labelText","children","htmlFor","FilterField","elements_InputGroup","Stocks","isFetchingHistoricalData","onClick","filterInput","handleFilter","stockDivs","stock","currentDateEntryIndex","arr","index","forEach","entry","i","entryDate","split","join","getCurrentDateEntryIndex","currentDateEntry","yesterdayEntry","lastWeekEntry","lastMonthEntry","includes","key","toFixed","react_router_dom","to","components_FilterField","StocksContainer","cleanStockData","results","dates","push","resultsDates","result","resultsIndex","cleanedUpResults","cleanUp","dataset_data","data","components_Stocks","historicalStockData","parentNode","firstChild","innerHTML","price","parseFloat","slice","input","setFilterInput","Dropdown","options","dropdownOptions","option","TradeDropdown","elements_Dropdown","Trade","onBlur","handleSymbolChange","cost","validSymbol","onSubmit","cashAvailable","hasFormData","readOnly","submitDisabled","components_TradeDropdown","stockPrice","disabled","react_router","when","message","TradeContainer","handleBlur","components_Trade","currentTradeCost","currentTradePrice","quantity","form","document","getElementById","serialize","hash","updateCost","numberOfShares","buyOrSell","filteredTransactions","tradeValidations","toUpperCase","preventDefault","Cost","trade","updateTransactions","reset","Transactions","handleDatesSortArrowClick","handleSymbolsSortArrowClick","transactionsFilterInput","transactionRows","Price","TransactionsContainer","components_Transactions","setTransactionsFilterInput","ControlPanel","Portfolio","stockSummaries","handleSortArrowClick","handleTradeClick","costs","reducer","allStocksCostBasis","currentStockValues","reducedValues","calculateCurrentShareValue","individualStocksCostBasis","stockCosts","stockQuantities","currentPrice","summary","PortfolioContainer","components_Portfolio","MainDropdown","createBrowserHistory","MainDropdownContainer","components_MainDropdown","history","Menu","withRouter","App","components_Header","containers_StocksContainer","containers_DateWidgetContainer","components_ControlPanel","exact","path","component","initialState","currentTradeSymbol","currentTradeQuantity","portfolio","stocksFilterInput","store","createStore","arguments","undefined","action","Actions","Object","objectSpread","toConsumableArray","applyMiddleware","thunk","ReactDOM","render","es","components_App"],"mappings":"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","file":"static/js/main.2f522552.chunk.js","sourcesContent":["export const getCurrentDateEntryIndex = (arr, date) => {\n  let index\n  date = makeUTCDate(date)\n\n  arr.forEach((entry, i) => {\n    let entryDate = new Date(entry[0].split('-').join(','))\n    entryDate = `${entryDate.getFullYear()}-${entryDate.getDate()}-${\n      entryDate.getMonth() + 1\n    }`\n    let dateString = `${date.getFullYear()}-${date.getDate()}-${\n      date.getMonth() + 1\n    }`\n    if (entryDate === dateString) {\n      index = i\n    }\n  })\n\n  return index\n}\n\nexport const makeDateString = (date) => {\n  date = makeUTCDate(date)\n  let year = date.getFullYear()\n  let day\n  date.getDate().toString().length === 2\n    ? (day = date.getDate())\n    : (day = `0${date.getDate()}`)\n  let month\n  date.getMonth().toString().length === 2\n    ? (month = date.getMonth() + 1)\n    : (month = `0${date.getMonth() + 1}`)\n\n  let dateString = `${year}-${month}-${day}`\n  console.log(dateString)\n  return dateString\n}\n\nexport const makeUTCDate = (milliseconds) => {\n  let date = new Date(milliseconds)\n  let dateYear = date.getUTCFullYear()\n  let dateMonth = date.getUTCMonth()\n  let dateDay = date.getUTCDate()\n  let UTCdate = new Date(dateYear, dateMonth, dateDay)\n\n  return UTCdate\n}\n","import { makeDateString, makeUTCDate } from '../Helpers/dateHelpers'\n\nexport function getFilteredTransactions( transactions, date ) {\n  let fliteredTransactions = transactions.filter(transaction => {\n    console.log('transaction_date ' + transaction.Date)\n    console.log('parsed ' + Date.parse(transaction.Date))\n    let transactionDate = new Date(Date.parse(transaction.Date))  //not cooperating\n    transactionDate = makeUTCDate(transactionDate)\n    console.log('transactionDate ' + transactionDate)\n    console.log('date ' + date)\n    console.log('bool ' + !(transactionDate > date))\n\n    return !(transactionDate > date)\n  })\n  return fliteredTransactions\n}\n\nexport function getNumberOfShares( transactions, symbol ) {\n  let stockTransactions = transactions.filter( transaction => {\n    return transaction.Symbol === symbol\n  })\n\n  if (stockTransactions.length === 0) {\n    return 0\n  }\n\n  let transactionQuantities = stockTransactions.map( transaction => {\n    return parseInt(transaction.Quantity)\n  })\n\n  let reducer = (accumulator, currentValue) => accumulator + currentValue;\n\n  let numberOfShares = transactionQuantities.reduce(reducer)\n\n  return numberOfShares\n}\n\n\n\nexport function calculateCurrentShareValue( symbol, transactions, date, historicalStockData, index ) {\n  let numberOfShares = getNumberOfShares( transactions, symbol )\n\n  let dateString = makeDateString(date)\n\n  let currentPrice = historicalStockData[index].dataset_data.data.filter( entry => { return entry[0] === dateString })[0][1]\n\n\n  return (numberOfShares * currentPrice).toFixed(2)\n}\n\nexport function getCostBasis( symbol, transactions ) {\n  let costs = transactions.map( transaction => {\n    return transaction.Cost\n  })\n\n let reducer = (accumulator, currentValue) => accumulator + currentValue;\n\n let costBasis = costs.reduce( reducer )\n\n return costBasis\n}\n\n","import { getNumberOfShares, getFilteredTransactions } from './Helpers/PortfolioHelpers'\n\nexport const GET_DATA_REQUEST = 'GET_DATA_REQUEST';\nexport const GET_DATA_SUCCESS = 'GET_DATA_SUCCESS';\nexport const GET_DATA_FAILURE = 'GET_DATA_FAILURE';\n\nexport const ON_DATE_WIDGET_CHANGE = 'ON_DATE_WIDGET_CHANGE';\nexport const ON_TRADE_CLICK = 'ON_TRADE_CLICK';\nexport const UPDATE_COST = 'UPDATE_COST';\nexport const UPDATE_QUANTITY = 'UPDATE_QUANTITY'\nexport const ON_VALID_INPUT ='ON_VALID_INPUT';\nexport const ON_INVALID_INPUT ='ON_INVALID_INPUT'\nexport const RESET_FORM_VALUES = 'RESET_FORM_VALUES'\nexport const UPDATE_CASH_AVAILABLE = 'UPDATE_CASH_AVAILABLE'\nexport const UPDATE_PORTFOLIO = 'UPDATE_PORTFOLIO'\nexport const UPDATE_TRANSACTIONS ='UPDATE_TRANSACTIONS'\nexport const SET_HAS_FORM_DATA = 'SET_HAS_FORM_DATA'\nexport const CLEAR_TRADE_FORM = 'CLEAR_TRADE_FORM'\nexport const INVALID_TRADE =' INVALID_TRADE'\nexport const VALID_TRADE = 'VALID_TRADE'\nexport const CHANGE_TRANSACTIONS_DATES_SORT_DIRECTION = 'CHANGE_TRANSACTIONS_DATES_SORT_DIRECTION'\nexport const CHANGE_TRANSACTIONS_SYMBOLS_SORT_DIRECTION = 'CHANGE_TRANSACTIONS_SYMBOLS_SORT_DIRECTION'\nexport const SORT_TRANSACTIONS_DATES = 'SORT_TRANSACTIONS_DATES'\nexport const SET_FILTER_INPUT = 'SET_FILTER_INPUT'\nexport const SET_TRANSACTIONS_FILTER_INPUT = 'SET_TRANSACTIONS_FILTER_INPUT'\n\nexport function getDataRequest() {\n  return {\n    type: GET_DATA_REQUEST,\n  }\n}\n\nexport function getDataSuccess(stockData) {\n  return {\n    type: GET_DATA_SUCCESS,\n    stockData\n  }\n}\n\nexport function getDataFailure(error) {\n  return {\n    type: GET_DATA_FAILURE,\n    error\n  }\n}\n\nexport function onDateWidgetChange(date) {\n  return {\n    type: ON_DATE_WIDGET_CHANGE,\n    date\n  }\n}\n\nexport function onTradeClick(selectedStock) {\n  return {\n    type: ON_TRADE_CLICK,\n    selectedStock\n  }\n}\n\nexport function updateQuantity(quantity) {\n  return {\n    type: UPDATE_QUANTITY,\n    quantity\n  }\n}\n\nexport function updateCost(quantity) {\n  return {\n    type: UPDATE_COST,\n    quantity\n  }\n}\n\nexport function onValidInput(tradeInfo) {\n  return {\n    type: ON_VALID_INPUT,\n    tradeInfo\n  }\n} \n\nexport function onInvalidInput() {\n  return {\n    type: ON_INVALID_INPUT,\n  }\n} \n\nexport function resetFormValues() {\n  return{\n    type: RESET_FORM_VALUES\n  }\n}\n\nexport function updateCashAvailable(trade) {\n  return {\n    type: UPDATE_CASH_AVAILABLE,\n    trade\n  }\n}\n\nexport function updatePortfolio(trade) {\n  return {\n    type: UPDATE_PORTFOLIO,\n    trade\n  }\n}\n\nexport function updateTransactions(trade) {\n  return {\n    type: UPDATE_TRANSACTIONS,\n    trade\n  }\n}\n\nexport function setHasFormData() {\n  return {\n    type: SET_HAS_FORM_DATA,\n  }\n}\n\nexport function invalidTrade() {\n  return {\n    type: INVALID_TRADE,\n  }\n}\n\nexport function validTrade() {\n  return {\n    type: VALID_TRADE,\n  }\n}\n\nexport function changeTransactionsDatesSortDirection( sortDirection ) {\n  return {\n    type: CHANGE_TRANSACTIONS_DATES_SORT_DIRECTION,\n    sortDirection,\n  }\n}\n\nexport function changeTransactionsSymbolsSortDirection( sortDirection ) {\n  return {\n    type: CHANGE_TRANSACTIONS_SYMBOLS_SORT_DIRECTION,\n    sortDirection,\n  }\n}\n\nexport function sortTransactionsDates( transactions ) {\n  return {\n    type: SORT_TRANSACTIONS_DATES,\n    transactions\n  }\n}\n\nexport function setFilterInput( input ) {\n  return {\n    type: SET_FILTER_INPUT,\n    input\n  }\n}\n\nexport function setTransactionsFilterInput( input ) {\n  return {\n    type: SET_TRANSACTIONS_FILTER_INPUT,\n    input\n  }\n}\n\nexport function getHistoricalStockData() {\n  return dispatch => {\n    dispatch(getDataRequest())\n\n    fetch('/api/historical')\n      .then(response => {\n        if (!response.ok) {\n          throw new Error (`${response.status} ${response.statusText}`)\n        }\n\n        return response.json()\n      })\n      .then(json => {\n        dispatch(getDataSuccess(json))\n      })\n      .catch(error => {\n        dispatch(getDataFailure(error))\n      })\n  }\n}\n\nexport function tradeValidations(tradeInfo) {\n  return (dispatch, getState) => {\n    let state = getState();\n    let symbol = tradeInfo.Symbol\n    let buyOrSell = tradeInfo.TradeDropdown\n    let filteredTransactions = []\n    let numberOfShares;\n\n    if ( state.transactions.length > 0) {\n      filteredTransactions = getFilteredTransactions( state.transactions, state.date )\n    }\n\n    if (buyOrSell === '/Sell') {\n      if ( tradeInfo.Quantity === '' || tradeInfo.Quantity <= 0 ) {\n        dispatch( invalidTrade() )\n      } else if ( filteredTransactions.length > 0 ) {  \n        numberOfShares = getNumberOfShares( filteredTransactions, symbol );\n        if ( tradeInfo.Quantity > numberOfShares) {\n          dispatch( invalidTrade() )\n        } else {\n          dispatch( validTrade() )\n        }\n      } else {\n        dispatch( invalidTrade() )\n      }\n    } else if (buyOrSell === '/Buy') {\n      if ( tradeInfo.Quantity === '' || tradeInfo.Quantity <= 0 ) {\n        dispatch( invalidTrade() )\n      } else if ( state.cashAvailable >= state.currentTradeCost ) {\n        console.log('Cost & ' + tradeInfo.Quantity)\n        dispatch( validTrade() )\n      }  else {\n        dispatch( invalidTrade() )\n      }\n    }\n  }\n}\n\nexport function handleTransactionsDatesSort() {\n  return (dispatch, getState) => {\n    let state = getState()\n    let transactions = state.transactions\n    let sortDirection = state.transactionsDatesSortDirection\n    let sortedTransactions;\n\n    if ( sortDirection === 'ascending' ) {\n      sortedTransactions = transactions.sort( (a, b) => {\n        return new Date(a.Date) - new Date(b.Date)\n      } )\n    } else {\n      sortedTransactions = transactions.sort( (a, b) => {\n        return new Date(b.Date) - new Date(a.Date)\n      } )\n    }\n\n    sortDirection === 'ascending' ? sortDirection = 'descending' : sortDirection = 'ascending'\n\n    Promise.resolve(dispatch(sortTransactionsDates( sortedTransactions )))\n    .then(dispatch(changeTransactionsDatesSortDirection( sortDirection )))\n  }\n}\n\nexport function handleTransactionsSymbolsSort() {\n  return (dispatch, getState) => {\n    let state = getState()\n    let transactions = state.transactions\n    let sortDirection = state.transactionsSymbolsSortDirection\n    let sortedTransactions;\n\n\n    if ( sortDirection === 'ascending' ) {\n      sortedTransactions = transactions.sort( (a, b) => {\n        return a.Symbol > b.Symbol ? 1 : -1\n      } )\n    } else {\n      sortedTransactions = transactions.sort( (a, b) => {\n        return a.Symbol < b.Symbol ? 1 : -1\n      } )\n    }\n\n    sortDirection === 'ascending' ? sortDirection = 'descending' : sortDirection = 'ascending'\n\n    Promise.resolve( dispatch( sortTransactionsDates( sortedTransactions ) ) )\n    .then( dispatch( changeTransactionsSymbolsSortDirection( sortDirection ) ) )\n  }\n}","export const DEC_1_2016 = 1480550400000;\nexport const JAN_1_2017 = 1483228800000//483228800000; 1483228800000\nexport const DEC_31_2017 = 1514678400000;\nexport const dayLength = 86400000;","import React from 'react'\nimport { JAN_1_2017, DEC_31_2017, dayLength } from '../dateMillisecondValues'\nimport { makeUTCDate } from '../Helpers/dateHelpers'\n\nconst DateWidget = ({ onChange, date }) => {\n  console.log(date)\n  date = makeUTCDate(date)\n  return (\n    <div id=\"DateWidget\" className=\"col-sm\">\n      <span id=\"start-date\">1/1/2017</span>\n      <span id=\"end-date\">12/31/2017</span>\n      <div id=\"DateWidget-container\">\n        <input\n          name=\"slider\"\n          id=\"slider\"\n          type=\"range\"\n          min={JAN_1_2017}\n          max={DEC_31_2017}\n          step={dayLength}\n          onChange={onChange}\n        />\n      </div>\n      <div>{date.toDateString()}</div>\n    </div>\n  )\n}\n\nexport default DateWidget\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { onDateWidgetChange, getHistoricalStockData } from '../actions'\nimport { makeUTCDate } from '../Helpers/dateHelpers'\nimport DateWidget from '../components/DateWidget'\n\nclass DateWidgetContainer extends Component {\n  componentDidMount() {\n    this.props.getHistoricalStockData()\n  }\n  render() {\n    const { date, onChange } = this.props\n    let utcDate = makeUTCDate(date)\n    return <DateWidget onChange={onChange} date={utcDate} />\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    date: state.date,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onChange: (e) => {\n      let date = makeUTCDate(parseInt(e.target.value))\n\n      dispatch(onDateWidgetChange(date))\n    },\n\n    getHistoricalStockData: () => {\n      dispatch(getHistoricalStockData())\n    },\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DateWidgetContainer)\n","import React from 'react';\n\nconst Header = () => {\n  return (\n    <div id='Header'>\n      <h1>Fideligard Historical Portfolio Simulator</h1>\n    </div>\n  )\n}\n\nexport default Header;","export const retrievedStocks = ['FB', 'BA', 'AAPL', 'GM']","import React from 'react'\nimport PropTypes from 'prop-types';\n\nconst InputGroup = ({name, labelText, children}) => (\n  <div className=\"form-group\">\n    <label htmlFor={name}>{labelText}</label>\n    {children}\n  </div>\n)\n\nInputGroup.propTypes = {\n  name: PropTypes.string,\n  labelText: PropTypes.string,\n  children: PropTypes.node.isRequired,\n}\n\nexport default InputGroup;","import React from 'react'\nimport InputGroup from './elements/InputGroup'\n\nconst FilterField = ({ onChange }) => {\n  return (\n    <div className='FilterField'>\n      <InputGroup name='FilterField' labelText='Fliter: '>\n        <input type='text' onChange={ onChange } />\n      </InputGroup>\n    </div>\n  )\n} \n\nexport default FilterField;","import React from 'react'\nimport { retrievedStocks } from '../retrievedStocks'\nimport { getCurrentDateEntryIndex, makeUTCDate } from '../Helpers/dateHelpers'\nimport { Link } from 'react-router-dom'\nimport FilterField from './FilterField'\n\nconst Stocks = ({\n  stockData,\n  date,\n  isFetchingHistoricalData,\n  onClick,\n  filterInput,\n  handleFilter,\n}) => {\n  //date = makeUTCDate(date)\n  const data = stockData.map((stock) => {\n    console.log(stock)\n    let currentDateEntryIndex = getCurrentDateEntryIndex(stock, date)\n\n    let currentDateEntry = stock[currentDateEntryIndex]\n\n    let yesterdayEntry =\n      currentDateEntry[1] - stock[currentDateEntryIndex - 1][1]\n\n    let lastWeekEntry =\n      currentDateEntry[1] - stock[currentDateEntryIndex - 7][1]\n\n    let lastMonthEntry =\n      currentDateEntry[1] - stock[currentDateEntryIndex - 30][1]\n\n    return [currentDateEntry[1], yesterdayEntry, lastWeekEntry, lastMonthEntry]\n  })\n\n  const stockDivs = data.map((entry, i) => {\n    if (entry[0]) {\n      if (filterInput === '' || retrievedStocks[i].includes(filterInput)) {\n        return (\n          <tr key={retrievedStocks[i]}>\n            <td id={retrievedStocks[i]}>{retrievedStocks[i]}</td>\n            <td id={`${retrievedStocks[i]}-price`}>\n              {'$' + entry[0].toFixed(2)}\n            </td>\n            <td id={`${retrievedStocks[i]}-1d`}>\n              {entry[1].toFixed(2) > 0\n                ? '+$' + entry[1].toFixed(2)\n                : '-$' + -entry[1].toFixed(2)}\n            </td>\n            <td id={`${retrievedStocks[i]}-7d`}>\n              {entry[2].toFixed(2) > 0\n                ? '+$' + entry[2].toFixed(2)\n                : '-$' + -entry[3].toFixed(2)}\n            </td>\n            <td id={`${retrievedStocks[i]}-30d`}>\n              {entry[3].toFixed(2) > 0\n                ? '+$' + entry[3].toFixed(2)\n                : '-$' + -entry[3].toFixed(2)}\n            </td>\n            <td>\n              <Link to=\"/Trade\" onClick={onClick}>\n                trade\n              </Link>\n            </td>\n          </tr>\n        )\n      } else {\n        return (\n          <tr key={i}>\n            <td></td>\n            <td>N/A</td>\n            <td></td>\n            <td></td>\n            <td></td>\n          </tr>\n        )\n      }\n    } else {\n      return (\n        <tr key={i}>\n          <td></td>\n          <td>N/A</td>\n          <td></td>\n          <td></td>\n          <td></td>\n        </tr>\n      )\n    }\n  })\n\n  return (\n    <div className=\"Stocks col-4 table-responsive\">\n      <h1>Stocks</h1>\n      <FilterField onChange={handleFilter} />\n\n      <table className=\"table table-striped\">\n        <thead>\n          <tr>\n            <th>Symbol</th>\n            <th>Price</th>\n            <th>1 day</th>\n            <th>7 day</th>\n            <th>30 day</th>\n            <th>Trade</th>\n          </tr>\n        </thead>\n        <tbody>\n          {isFetchingHistoricalData ? (\n            <tr>\n              <td>loading...</td>\n            </tr>\n          ) : (\n            stockDivs\n          )}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default Stocks\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport Stocks from '../components/Stocks';\nimport {cleanUp} from '../Helpers/ApiCleanup';\nimport {onTradeClick, onValidInput, setFilterInput} from '../actions';\n\n\nclass StocksContainer extends Component {\n  \n  render() {\n    const {stockData, date, isFetchingHistoricalData, onClick, handleFilter, filterInput} = this.props\n    let cleanStockData = stockData.map(stock => {\n      return cleanUp(stock.dataset_data.data)\n    })\n    return <Stocks \n              stockData={cleanStockData} \n              date={date} \n              isFetchingHistoricalData={isFetchingHistoricalData} \n              onClick={onClick}\n              filterInput={filterInput}\n              handleFilter={handleFilter}\n            />\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    stockData: state.historicalStockData,\n    date: state.date,\n    isFetchingHistoricalData: state.isFetchingHistoricalData,\n    filterInput: state.filterInput\n  }\n}\n\nconst mapDispatchToProps = ( dispatch ) => {\n  return {\n    onClick: (e) => {\n      let tradeInfo = {}\n\n      tradeInfo.symbol = e.target.parentNode.parentNode.firstChild.innerHTML\n      tradeInfo.price = parseFloat(e.target.parentNode.parentNode. \n                              children[1].innerHTML.slice(1)).toFixed(2)\n\n      dispatch(onTradeClick(tradeInfo))\n      dispatch(onValidInput(tradeInfo))\n    },\n\n    handleFilter: (e) => {\n      let input = e.target.value\n      console.log('filterInput ' + input)\n      dispatch(setFilterInput(input))\n    }\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(StocksContainer)","import { DEC_1_2016, DEC_31_2017, dayLength } from '../dateMillisecondValues'\nimport { makeUTCDate } from './dateHelpers'\n\nexport function cleanUp(results) {\n  let dates = []\n\n  for (let i = DEC_1_2016; i <= DEC_31_2017; i += dayLength) {\n    let date = makeUTCDate(i)\n    let year = `${date.getFullYear()}`\n    let month\n    let day\n    date.getMonth() + 1 < 10\n      ? (month = `0${date.getMonth() + 1}`)\n      : (month = `${date.getMonth() + 1}`)\n    date.getDate() < 10\n      ? (day = `0${date.getDate()}`)\n      : (day = `${date.getDate()}`)\n    let dateString = `${year}-${month}-${day}`\n    dates.push(dateString)\n  }\n\n  let resultsDates = results.map((result) => {\n    return result[0]\n  })\n\n  let resultsIndex = 0\n\n  let cleanedUpResults = results //results.map(result => { return [result[0], result[1]]})\n\n  dates.forEach((date, i) => {\n    if (!resultsDates.includes(date)) {\n      cleanedUpResults.push([date, results[resultsIndex][1]])\n    } else {\n      resultsIndex++\n    }\n  })\n\n  cleanedUpResults = cleanedUpResults.sort((a, b) => {\n    return new Date(a[0]) - new Date(b[0])\n  })\n\n  //console.log(cleanedUpResults)\n\n  return cleanedUpResults\n}\n","import React from 'react'\n\nconst Dropdown = ({options, className, onChange, name}) => {\n  \n  let dropdownOptions = options.map((option, i) => {\n    return <option key={i} name={option} value={`/${option}`}>{option}</option>\n  })\n  \n  return (\n    <select className={`Dropdown ${className}`}  onChange={onChange} name={name} >\n      {dropdownOptions}\n    </select>\n  )\n}\n\nexport default Dropdown;","import React from 'react';\nimport Dropdown from './elements/Dropdown'\n\nconst TradeDropdown = ({options}) => {\n  return (\n    <Dropdown options={['Buy', 'Sell']} name='TradeDropdown' />\n  )\n}\n\nexport default TradeDropdown;","import React from 'react'\nimport InputGroup from './elements/InputGroup'\nimport TradeDropdown from './TradeDropdown'\nimport { makeDateString } from '../Helpers/dateHelpers'\nimport { Prompt } from 'react-router-dom'\n\nconst Trade = ({\n  date,\n  selectedStock,\n  onBlur,\n  handleSymbolChange,\n  cost,\n  validSymbol,\n  onSubmit,\n  cashAvailable,\n  dateString,\n  stockData,\n  price,\n  hasFormData,\n  readOnly,\n  submitDisabled,\n}) => {\n  return (\n    <div id=\"Trade\">\n      <h2>Trade</h2>\n      <div className=\"TradeForm col-8\">\n        <form id=\"buySell\" onSubmit={onSubmit}>\n          <InputGroup>\n            <label htmlFor=\"Symbol\">Symbol:</label>\n            <input\n              className={validSymbol ? 'normal' : 'warning'}\n              type=\"text\"\n              name=\"Symbol\"\n              value={selectedStock.symbol}\n              onChange={handleSymbolChange}\n              readOnly={readOnly}\n            />{' '}\n            {validSymbol ? '' : <p id=\"warning-message\">Invalid Symbol</p>}\n          </InputGroup>\n          <InputGroup>\n            <label htmlFor=\"Buy/Sell\">Buy/Sell:</label>\n            <TradeDropdown />\n          </InputGroup>\n          <InputGroup>\n            <label htmlFor=\"Quantity\">Quantity:</label>\n            <input type=\"text\" name=\"Quantity\" onBlur={onBlur} />\n          </InputGroup>\n          <InputGroup>\n            <label htmlFor=\"Date\">Date:</label>\n            <input\n              type=\"date\"\n              name=\"Date\"\n              id=\"Date\"\n              min=\"2017-01-01\"\n              max=\"2017-12-31\"\n              value={makeDateString(date)}\n              readOnly={true}\n            />\n          </InputGroup>\n          <InputGroup>\n            <label htmlFor=\"Price\">Price: $</label>\n            <input\n              type=\"text\"\n              name=\"Price\"\n              value={\n                selectedStock.stockPrice ? selectedStock.stockPrice : price\n              }\n              id=\"Price\"\n              readOnly={true}\n            />\n          </InputGroup>\n          <InputGroup>\n            <label htmlFor=\"Price\">Cost: $</label>\n            <input\n              type=\"text\"\n              name=\"Cost\"\n              value={cost}\n              id=\"Cost\"\n              readOnly={true}\n            />\n          </InputGroup>\n          <input type=\"submit\" disabled={submitDisabled} />\n          <Prompt\n            when={hasFormData}\n            message=\"Your form contains unsubmitted data. Are you sure you want to leave?\"\n          />\n        </form>\n      </div>\n      <div className=\"cash col-4\">\n        <h5>Cash Available:</h5>\n        <p>${cashAvailable.toFixed(2)}</p>\n        <h5>Trade Status</h5>\n        {submitDisabled ? (\n          <p id=\"InvalidTradeStatus\">INVALID</p>\n        ) : (\n          <p id=\"ValidTradeStatus\">VALID</p>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default Trade\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Trade from '../components/Trade'\nimport {\n        onValidInput, \n        onInvalidInput, \n        updateCost, \n        updateCashAvailable,\n        tradeValidations,\n        setHasFormData,\n        updateTransactions,\n        resetFormValues,\n        invalidTrade,\n      } from '../actions'\nimport { retrievedStocks } from '../retrievedStocks'\nimport serialize from 'form-serialize'\n\nclass TradeContainer extends Component {\n\n  render(){\n    const { date, selectedStock, cost, handleBlur, handleSymbolChange, validSymbol, \n           onSubmit, cashAvailable, dateString, stockData, price, hasFormData, readOnly,\n           submitDisabled } = this.props \n    return <Trade \n              date={ date } \n              selectedStock={ selectedStock } \n              onBlur={ handleBlur } \n              handleSymbolChange={ handleSymbolChange }\n              cost={ cost } \n              validSymbol={ validSymbol }\n              onSubmit={ onSubmit }\n              cashAvailable={ cashAvailable }\n              dateString={ dateString }\n              stockData={ stockData }\n              price={ price }\n              hasFormData={hasFormData}\n              readOnly={ readOnly }\n              submitDisabled={ submitDisabled }\n            />\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    date: state.date,\n    selectedStock: state.selectedStock,\n    cost: state.currentTradeCost,\n    validSymbol: state.validSymbol,\n    cashAvailable: state.cashAvailable,\n    dateString: state.dateString,\n    stockData: state.historicalStockData,\n    price: state.currentTradePrice,\n    hasFormData: state.hasFormData,\n    readOnly: state.readOnly,\n    submitDisabled: state.submitDisabled\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleBlur: (e) => {\n      let quantity = e.target.value\n      let form = document.getElementById('buySell')\n      let tradeInfo = serialize( form, { hash: true } )\n\n      Promise.resolve( dispatch( updateCost(quantity) ))\n      .then( dispatch( tradeValidations(tradeInfo) ))\n    },\n\n    handleSymbolChange: (e) => {\n      let symbol = e.target.value\n\n      console.log('e' + e.target.value)\n\n      if (retrievedStocks.includes(symbol.toUpperCase())) {\n        \n        let price = parseFloat(document.getElementById(`${symbol}-price`).innerHTML.slice(1))\n        let tradeInfo = { symbol: symbol, price: price }\n    \n        dispatch(onValidInput(tradeInfo))\n        dispatch(setHasFormData())\n      } else if ( symbol === '' ) {\n        \n        let tradeInfo = { symbol: symbol, price: '' }\n        dispatch(onValidInput(tradeInfo))\n        dispatch(setHasFormData())\n      \n      } else {\n        dispatch(onInvalidInput())\n        console.log('nope')\n      }\n      \n    },\n\n    onSubmit: (e) => {\n      e.preventDefault();\n\n      let form = e.target\n      let tradeInfo = serialize(form, { hash: true })\n\n      if (tradeInfo.TradeDropdown === '/Buy') {\n        tradeInfo.Cost = tradeInfo.Cost * -1\n      }\n\n      if (tradeInfo.TradeDropdown === '/Sell') {\n        tradeInfo.Quantity = tradeInfo.Quantity * -1\n      }\n\n    dispatch(updateCashAvailable(tradeInfo))\n    dispatch(updateTransactions(tradeInfo))\n    dispatch(resetFormValues())\n    dispatch(invalidTrade())\n    form.reset()\n    },\n  }\n}\n\nexport default connect (\n  mapStateToProps,\n  mapDispatchToProps\n)(TradeContainer)","import React from 'react'\nimport FilterField from './FilterField'\n\nconst Transactions = ({ transactions, \n                        handleDatesSortArrowClick, \n                        handleSymbolsSortArrowClick, \n                        transactionsDatesSortDirection, \n                        transactionsSymbolsSortDirection, \n                        handleFilter, \n                        transactionsFilterInput }) => {\n  const transactionRows = transactions.map( (transaction, i) => {\n    if (transactionsFilterInput === '' || transaction.Symbol.includes(transactionsFilterInput) || transaction.Date.includes(transactionsFilterInput)) {\n      return (\n        <tr className='transaction-row' key={ transaction.Symbol }>\n          <td>{ transaction.Date }</td>\n          <td>{ transaction.Symbol }</td>\n          <td>{ transaction.TradeDropdown.slice(1) }</td>\n          <td>{ transaction.Quantity }</td>\n          <td>${ transaction.Price }</td>\n        </tr>\n      )\n    } else {\n      return \"thing\"\n    }\n  })\n  return (\n    <div className='Transactions'>\n      <h1>Transactions</h1>\n      <FilterField onChange={ handleFilter }/>\n      <table className='table table-striped'>\n        <thead>\n          <tr>\n            <th>\n              Date \n              { transactionsDatesSortDirection === 'ascending' ? \n                <span className='sort-arrow' onClick={ handleDatesSortArrowClick }>&#x25B4;</span> :\n                <span className='sort-arrow' onClick={ handleDatesSortArrowClick }>&#x25BE;</span>\n              }\n            </th>\n            <th>\n              Symbol \n              { transactionsSymbolsSortDirection === 'ascending' ?\n                <span className='sort-arrow' onClick={ handleSymbolsSortArrowClick }>&#x25B4;</span> :\n                <span className='sort-arrow' onClick={ handleSymbolsSortArrowClick }>&#x25BE;</span>\n              }\n            </th>\n            <th>Type</th>\n            <th>Quantity</th>  \n            <th>Price</th>\n          </tr>\n        </thead>\n        <tbody>\n          { transactionRows }\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default Transactions","import React, {Component} from 'react'\nimport { connect } from 'react-redux'\nimport Transactions from '../components/Transactions'\nimport { handleTransactionsDatesSort, handleTransactionsSymbolsSort, setTransactionsFilterInput } from '../actions'\n\nclass TransactionsContainer extends Component {\n  render() {\n    const { transactions, handleDatesSortArrowClick, \n            transactionsDatesSortDirection, handleSymbolsSortArrowClick,\n            transactionsSymbolsSortDirection, handleFilter, transactionsFilterInput } = this.props\n    return (\n      <Transactions \n        transactions={ transactions } \n        handleDatesSortArrowClick={ handleDatesSortArrowClick } \n        handleSymbolsSortArrowClick={ handleSymbolsSortArrowClick }\n        transactionsDatesSortDirection={ transactionsDatesSortDirection }\n        transactionsSymbolsSortDirection={ transactionsSymbolsSortDirection }\n        handleFilter={ handleFilter }\n        transactionsFilterInput={ transactionsFilterInput } \n      />\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    transactions: state.transactions,\n    transactionsDatesSortDirection: state.transactionsDatesSortDirection,\n    transactionsSymbolsSortDirection: state.transactionsSymbolsSortDirection,\n    transactionsFilterInput: state.transactionsFilterInput\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleDatesSortArrowClick: () => {\n      dispatch( handleTransactionsDatesSort() )\n    },\n\n    handleSymbolsSortArrowClick: () => {\n      dispatch( handleTransactionsSymbolsSort() )\n    },\n\n    handleFilter: (e) => {\n      let input = e.target.value\n      console.log('filterInput ' + input)\n      dispatch(setTransactionsFilterInput(input))\n    }\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TransactionsContainer)","import React from 'react'\n\nconst ControlPanel = ({children, onChange}) => {\n  return (\n    <div className='ControlPanel col-sm'>\n      {children}\n    </div>\n  )\n}\n\nexport default ControlPanel;","import React from 'react'\nimport {\n  calculateCurrentShareValue,\n  getFilteredTransactions,\n} from '../Helpers/PortfolioHelpers'\nimport { makeDateString } from '../Helpers/dateHelpers'\nimport { retrievedStocks } from '../retrievedStocks'\nimport { Link } from 'react-router-dom'\n\nconst Portfolio = ({\n  transactions,\n  dateString,\n  historicalStockData,\n  date,\n  handleSortArrowClick,\n  handleTradeClick,\n}) => {\n  let filteredTransactions = getFilteredTransactions(transactions, date)\n\n  let costs = filteredTransactions.map((transaction) => {\n    return -transaction.Cost\n  })\n\n  let reducer = (accumulator, currentValue) =>\n    parseFloat(accumulator) + parseFloat(currentValue)\n\n  let allStocksCostBasis = 0\n  let currentStockValues = 0\n  let reducedValues = 0\n  let stockSummaries\n\n  if (costs.length > 0) {\n    allStocksCostBasis = costs.reduce(reducer)\n\n    currentStockValues = retrievedStocks.map((symbol, i) => {\n      return calculateCurrentShareValue(\n        symbol,\n        filteredTransactions,\n        date,\n        historicalStockData,\n        i,\n      )\n    })\n\n    let individualStocksCostBasis = retrievedStocks.map((symbol) => {\n      let transactions = filteredTransactions.filter((transaction) => {\n        return transaction.Symbol === symbol\n      })\n\n      let stockCosts = transactions.map((transaction) => {\n        return transaction.Cost\n      })\n\n      if (stockCosts.length > 0) {\n        let individualStockCostBasis = stockCosts.reduce(reducer)\n        return { symbol: individualStockCostBasis }\n      } else {\n        return { symbol: 0 }\n      }\n    })\n\n    let stockQuantities = retrievedStocks.map((symbol) => {\n      let transactions = filteredTransactions.filter((transaction) => {\n        return transaction.Symbol === symbol\n      })\n\n      let stockQuantities = transactions.map((transaction) => {\n        return parseInt(transaction.Quantity)\n      })\n\n      let reducedQuantities\n\n      //what happens with empty list?\n      if (stockQuantities.length > 0) {\n        reducedQuantities = stockQuantities.reduce(reducer)\n      } else {\n        reducedQuantities = null\n      }\n\n      return reducedQuantities\n    })\n\n    stockSummaries = retrievedStocks.map((symbol, i) => {\n      let dateString = makeDateString(date)\n\n      let currentPrice = historicalStockData[i].dataset_data.data.filter(\n        (entry) => {\n          return entry[0] === dateString\n        },\n      )[0][1]\n\n      if (stockQuantities[i] != null) {\n        return (\n          <tr key={symbol}>\n            <td id={`${symbol}-Portfolio`}>{symbol}</td>\n            <td>{stockQuantities[i]}</td>\n            <td id={`costBasis-${symbol}`}>\n              ${-individualStocksCostBasis[i].symbol.toFixed(2)}\n            </td>\n            <td id={`currentValue-${symbol}`}>${currentStockValues[i]}</td>\n            <td>\n              $\n              {(\n                currentStockValues[i] - -individualStocksCostBasis[i].symbol\n              ).toFixed(2)}\n            </td>\n            <td>${currentPrice.toFixed(2)}</td>\n            <td>\n              <Link to=\"/Trade\" onClick={() => handleTradeClick(symbol)}>\n                trade\n              </Link>\n            </td>\n          </tr>\n        )\n      } else {\n        return null\n      }\n    })\n\n    stockSummaries = stockSummaries.filter((summary) => {\n      return summary !== ''\n    })\n\n    reducedValues = currentStockValues\n      .filter((value) => {\n        return value !== null\n      })\n      .reduce(reducer)\n  }\n\n  return (\n    <div className=\"Portfolio table-responsive\">\n      <h1>Portfolio</h1>\n      <table className=\"Portfolio-summary table table-striped\">\n        <thead>\n          <tr>\n            <th>Cost Basis</th>\n            <th>Current Value</th>\n            <th>Profit/Loss</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>${allStocksCostBasis.toFixed(2)}</td>\n            <td>${parseFloat(reducedValues).toFixed(2)}</td>\n            <td>${(reducedValues - allStocksCostBasis).toFixed(2)}</td>\n          </tr>\n        </tbody>\n      </table>\n      <table className=\"Portfolio-breakdown table table-striped\">\n        <thead>\n          <tr>\n            <th>\n              Symbol{' '}\n              <span className=\"sort-arrow\" onClick={handleSortArrowClick}>\n                &#x25B4;\n              </span>\n            </th>\n            <th>Quantity</th>\n            <th>Cost Basis</th>\n            <th>Current value</th>\n            <th>Profit/Loss</th>\n            <th>Current Price</th>\n            <th>Trade?</th>\n          </tr>\n        </thead>\n        <tbody>{stockSummaries}</tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default Portfolio\n","import React, {Component} from 'react'\nimport { connect } from 'react-redux'\nimport { onTradeClick, onValidInput } from '../actions'\nimport Portfolio from '../components/Portfolio'\n\nclass PortfolioContainer extends Component {\n  render() {\n    const { transactions, historicalStockData, dateString, date, handleTradeClick } = this.props\n    return (\n      <Portfolio \n        transactions={ transactions } \n        historicalStockData={ historicalStockData } \n        dateString={ dateString }\n        date={ date }\n        handleTradeClick={ handleTradeClick }\n      />\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    transactions: state.transactions,\n    historicalStockData: state.historicalStockData,\n    dateString: state.dateString,\n    date: state.date\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleSortArrowClick: (e) => {\n\n    },\n\n    handleTradeClick: (symbol) => {\n\n      let tradeInfo = {}\n\n      tradeInfo.symbol = document.getElementById(`${symbol}`).innerHTML\n      tradeInfo.price = parseFloat(document.getElementById(`${symbol}-price`).innerHTML.slice(1)).toFixed(2)\n\n      dispatch(onTradeClick(tradeInfo))\n      dispatch(onValidInput(tradeInfo))\n    }\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PortfolioContainer)\n\n\n","import React from 'react'\nimport Dropdown from './elements/Dropdown'\n\nconst MainDropdown = ({onChange}) => {\n  return (\n    <Dropdown options={['Trade', 'Transactions', 'Portfolio']} className='MainDropdown' onChange={onChange} />\n  )\n}\n\nexport default MainDropdown;","import { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport MainDropdown from '../components/MainDropdown'\nimport history from '../history'\nimport {resetFormValues} from '../actions'\n\nclass MainDropdownContainer extends Component {\n  \n  render() {\n    const {onChange} = this.props \n\n    return <MainDropdown onChange={onChange} />\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onChange: (e) => {\n      console.log(e.target.value)\n      history.push(`${e.target.value}`)\n      dispatch(resetFormValues())\n    }\n  }\n}\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(MainDropdownContainer)\n\n//export default MainDropdownContainer","import React from 'react';\nimport {Router} from 'react-router'\nimport {\n  //BrowserRouter as Router,\n  Route,\n  Switch,\n  withRouter,\n} from 'react-router-dom'\nimport DateWidgetContainer from '../containers/DateWidgetContainer'\nimport Header from './Header';\nimport StocksContainer from '../containers/StocksContainer';\nimport TradeContainer from '../containers/TradeContainer';\nimport TransactionsContainer from '../containers/TransactionsContainer'\nimport ControlPanel from './ControlPanel'\nimport PortfolioContainer from '../containers/PortfolioContainer';\nimport MainDropdownContainer from '../containers/MainDropdownContainer'\nimport history from \"../history\";\n\nconst Menu = withRouter( MainDropdownContainer )\n\nconst App = () => {\n  return (\n    <Router history={ history }>\n      <div className=\"App container-fluid\">\n        <Header />\n        <div className='row'>\n          <StocksContainer />\n          <div className='buffer col-1'></div>\n          <div className='col-sm'>\n          <DateWidgetContainer />\n          <div className='buffer col-5'></div>\n          <ControlPanel>\n            <Menu options={ ['Trade', 'Transactions', 'Portfolio'] } />\n            <Switch>\n              <Route exact path='/' component={ TradeContainer } />\n              <Route exact path='/Trade' component={ TradeContainer } />\n              <Route exact path='/Transactions' component={ TransactionsContainer } />\n              <Route exact path='/Portfolio' component={ PortfolioContainer } />\n            </Switch>\n          </ControlPanel>\n          </div>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\n\nexport default App;\n","import * as Actions from './actions'\nimport { makeDateString, makeUTCDate } from './Helpers/dateHelpers'\nimport { JAN_1_2017 } from './dateMillisecondValues'\n\nconst initialState = {\n  date: JAN_1_2017, //makeUTCDate(JAN_1_2017),\n  dateString: '',\n  historicalStockData: [],\n  selectedStock: {},\n  currentTradeCost: 0,\n  currentTradeSymbol: '',\n  currentTradeQuantity: 0,\n  currentTradePrice: 0,\n  validSymbol: true,\n  cashAvailable: 1000.0,\n  transactions: [],\n  portfolio: {},\n  isFetchingHistoricalData: false,\n  hasFormData: false,\n  readOnly: false,\n  submitDisabled: true,\n  transactionsDatesSortDirection: 'ascending',\n  transactionsSymbolsSortDirection: 'ascending',\n  filterInput: '',\n  stocksFilterInput: '',\n  transactionsFilterInput: '',\n  error: null,\n}\n\nexport function fideligard(state = initialState, action) {\n  switch (action.type) {\n    case Actions.ON_DATE_WIDGET_CHANGE:\n      console.log('dateWidget ' + makeUTCDate(action.date))\n      return {\n        ...state,\n        date: makeUTCDate(action.date),\n      }\n    case Actions.ON_TRADE_CLICK:\n      return {\n        ...state,\n        selectedStock: action.selectedStock,\n        currentTradeSymbol: action.selectedStock.symbol,\n        dateString: makeDateString(state.date),\n        readOnly: true,\n      }\n    case Actions.UPDATE_QUANTITY:\n      return {\n        ...state,\n        currentTradeQuantity: action.quantity,\n      }\n    case Actions.UPDATE_COST:\n      return {\n        ...state,\n        currentTradeCost: state.currentTradePrice * action.quantity,\n      }\n    case Actions.ON_VALID_INPUT:\n      return {\n        ...state,\n        validSymbol: true,\n        currentTradeSymbol: action.tradeInfo.symbol,\n        currentTradePrice: action.tradeInfo.price,\n      }\n    case Actions.ON_INVALID_INPUT:\n      return {\n        ...state,\n        validSymbol: false,\n        currentTradeSymbol: '',\n      }\n    case Actions.RESET_FORM_VALUES:\n      return {\n        ...state,\n        readOnly: false,\n        selectedStock: { ...state.selectedStock, symbol: '' },\n        currentTradeSymbol: '',\n        currentTradePrice: '',\n        currentTradeCost: 0,\n        currentTradeQuantity: '',\n      }\n    case Actions.UPDATE_CASH_AVAILABLE:\n      return {\n        ...state,\n        cashAvailable: state.cashAvailable + parseFloat(action.trade.Cost),\n      }\n    case Actions.UPDATE_TRANSACTIONS:\n      return {\n        ...state,\n        transactions: [...state.transactions, action.trade],\n      }\n    case Actions.SET_HAS_FORM_DATA:\n      return {\n        ...state,\n        hasFormData: true,\n      }\n    case Actions.INVALID_TRADE:\n      return {\n        ...state,\n        submitDisabled: true,\n      }\n    case Actions.VALID_TRADE:\n      return {\n        ...state,\n        submitDisabled: false,\n      }\n    case Actions.CHANGE_TRANSACTIONS_DATES_SORT_DIRECTION:\n      return {\n        ...state,\n        transactionsDatesSortDirection: action.sortDirection,\n      }\n    case Actions.CHANGE_TRANSACTIONS_SYMBOLS_SORT_DIRECTION:\n      return {\n        ...state,\n        transactionsSymbolsSortDirection: action.sortDirection,\n      }\n    case Actions.SORT_TRANSACTIONS_DATES:\n      return {\n        ...state,\n        transactions: action.transactions,\n      }\n    case Actions.SET_FILTER_INPUT:\n      return {\n        ...state,\n        filterInput: action.input,\n      }\n    case Actions.SET_TRANSACTIONS_FILTER_INPUT:\n      return {\n        ...state,\n        transactionsFilterInput: action.input,\n      }\n    case Actions.GET_DATA_REQUEST:\n      return {\n        ...state,\n        isFetchingHistoricalData: true,\n      }\n    case Actions.GET_DATA_SUCCESS:\n      return {\n        ...state,\n        historicalStockData: action.stockData,\n        isFetchingHistoricalData: false,\n      }\n    case Actions.GET_DATA_FAILURE:\n      return {\n        ...state,\n        isFetchingHistoricalData: false,\n        error: action.error,\n      }\n    default:\n      return state\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport './index.css'\nimport App from './components/App'\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\nimport { fideligard } from './reducers'\n\nconst store = createStore(fideligard, applyMiddleware(thunk))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}